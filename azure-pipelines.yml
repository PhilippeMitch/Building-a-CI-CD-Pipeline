# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool: myAgentPool

variables:
  azureServiceConnectionId: 'myServiceConnection'
  webAppName: 'flask-app-proj2-mitch'
  environmentName: 'flask-ml-service'
  projectRoot: $(System.DefaultWorkingDirectory)

stages:
- stage: Build
  displayName: Build Web App
  jobs:
  - job: BuildJob
    pool: myAgentPool
    steps:
    
    - script: |
        python -m venv antenv
        source antenv/bin/activate
        PIP_BREAK_SYSTEM_PACKAGES=1
        python -m pip install --upgrade pip
        pip install setup
        pip install -r requirements.txt --break-system-packages
      workingDirectory: $(projectRoot)
      displayName: "Install requirements"

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(projectRoot)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Upload package'
      artifact: drop

- stage: Deploy
  displayName: 'Deploy Web App'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    pool: myAgentPool
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App : flask-price-prediction'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(webAppName)
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
